package com.se.service;

import com.se.dto.UnactivatedAccountDTO;
import com.se.entity.*;
import com.se.mapper.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UnactivatedAccountServiceImpl implements UnactivatedAccountService{
    @Autowired
    private UnactivatedAccountMapper unactivatedAccountMapper;
    @Autowired
    private StudentAccountMapper studentAccountMapper;
    @Autowired
    private TeacherAccountMapper teacherAccountMapper;
    @Autowired
    private StudentMapper studentMapper;
    @Autowired
    private TeacherMapper teacherMapper;

    @Override
    public int activateAccount(String Id) {
        //先找出来这个账户
        UnactivatedAccount unactivatedAccount = unactivatedAccountMapper.selectByPrimaryKey(Id);
        //判断身份
        if(unactivatedAccount.getIsTeacher() == false)
        {
            //学生
            unactivatedAccountMapper.deleteByPrimaryKey(Id);
            StudentAccount studentAccount = new StudentAccount(unactivatedAccount.getId(),unactivatedAccount.getEmail(),unactivatedAccount.getPassword());
            studentAccountMapper.insert(studentAccount);
            Student student = new Student(unactivatedAccount.getId(),unactivatedAccount.getEmail(),unactivatedAccount.getName(),null,null);
            studentMapper.insert(student);
        }
        if(unactivatedAccount.getIsTeacher() == true && unactivatedAccount.getIsSeniorTercher() == false)
        {
            unactivatedAccountMapper.deleteByPrimaryKey(Id);
            TeacherAccount teacherAccount = new TeacherAccount(unactivatedAccount.getId(),unactivatedAccount.getEmail(),unactivatedAccount.getPassword());
            teacherAccountMapper.insert(teacherAccount);
            Teacher teacher = new Teacher(unactivatedAccount.getId(),unactivatedAccount.getName(),null,false);
            teacherMapper.insert(teacher);
        }
        if(unactivatedAccount.getIsTeacher() == true && unactivatedAccount.getIsSeniorTercher() == true)
        {
            unactivatedAccountMapper.deleteByPrimaryKey(Id);
            TeacherAccount teacherAccount = new TeacherAccount(unactivatedAccount.getId(),unactivatedAccount.getEmail(),unactivatedAccount.getPassword());
            teacherAccountMapper.insert(teacherAccount);
            Teacher teacher = new Teacher(unactivatedAccount.getId(),unactivatedAccount.getName(),null,true);
            teacherMapper.insert(teacher);
        }
        return 1;
    }

    @Override
    public int deleteByPrimaryKey(String id) {
        return unactivatedAccountMapper.deleteByPrimaryKey(id);
    }


    @Override
    public List<UnactivatedAccountDTO> selectAllUnactivatedAccounts() {
        return unactivatedAccountMapper.selectAllUnactivatedAccounts();
    }
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ADMINISTRATOR_ACCOUNT
     *
     * @mbg.generated Wed Oct 27 09:24:02 CST 2021
     */
    @Override
    public int insert(UnactivatedAccount record) {
        return unactivatedAccountMapper.insert(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ADMINISTRATOR_ACCOUNT
     *
     * @mbg.generated Wed Oct 27 09:24:02 CST 2021
     */
    @Override
    public int insertSelective(UnactivatedAccount record) {
        return unactivatedAccountMapper.insertSelective(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ADMINISTRATOR_ACCOUNT
     *
     * @mbg.generated Wed Oct 27 09:24:02 CST 2021
     */
    @Override
    public UnactivatedAccount selectByPrimaryKey(String id) {
        return unactivatedAccountMapper.selectByPrimaryKey(id);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ADMINISTRATOR_ACCOUNT
     *
     * @mbg.generated Wed Oct 27 09:24:02 CST 2021
     */
    @Override
    public int updateByPrimaryKeySelective(UnactivatedAccount record) {
        return unactivatedAccountMapper.updateByPrimaryKeySelective(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ADMINISTRATOR_ACCOUNT
     *
     * @mbg.generated Wed Oct 27 09:24:02 CST 2021
     */
    @Override
    public int updateByPrimaryKey(UnactivatedAccount record) {
        return unactivatedAccountMapper.updateByPrimaryKey(record);
    }
}
