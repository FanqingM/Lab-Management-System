package com.se.service;

import com.se.dto.CourseDTO;
import com.se.dto.CourseINOTeacher;
import com.se.dto.TeacherDTO;
import com.se.dto.TeacherINO;
import com.se.entity.Teacher;
import com.se.entity.TeacherAccount;
import com.se.mapper.TeacherAccountMapper;
import com.se.mapper.TeacherMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TeacherServiceImpl implements TeacherService{
    @Autowired
    private TeacherMapper teacherMapper;
    @Autowired
    private TeacherAccountMapper teacherAccountMapper;
    @Override
    public int deleteByPrimaryKey(String id) {
        return teacherMapper.deleteByPrimaryKey(id);
    }


    @Override
    public List<TeacherDTO> selectAllTeachers() {
        return teacherMapper.selectAllTeachers();
    }
    @Override
    public List<CourseDTO> selectAllCourses(CourseINOTeacher courseINOTeacher) {return teacherMapper.selectAllCourses(courseINOTeacher);}

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ADMINISTRATOR_ACCOUNT
     *
     * @mbg.generated Wed Oct 27 09:24:02 CST 2021
     */
    @Override
    public int insert(TeacherINO teacherINO) {

        Teacher teacher = new Teacher();
        System.out.println(teacherINO.getId());
        teacher.setId(teacherINO.getId());
        teacher.setName(teacherINO.getName());
        teacher.setSchoolName(teacherINO.getSchoolName());
        TeacherAccount teacherAccount = new TeacherAccount();
        teacherAccount.setEmail(teacherINO.getEmail());
        teacherAccount.setPassword(teacherINO.getId());
        teacherAccount.setId(teacherINO.getId());
        teacherAccountMapper.insert(teacherAccount);
        return teacherMapper.insert(teacher);
    }


    @Override
    public int insertManyTeachers(List<TeacherINO> teacherINOs) {
        for(int i=0;i<teacherINOs.size();i++)
        {
            Teacher teacher = new Teacher();
            teacher.setId(teacherINOs.get(i).getId());
            teacher.setName(teacherINOs.get(i).getName());
            teacher.setSchoolName(teacherINOs.get(i).getSchoolName());
            TeacherAccount teacherAccount = new TeacherAccount();
            teacherAccount.setEmail(teacherINOs.get(i).getEmail());
            teacherAccount.setPassword(teacherINOs.get(i).getId());
            teacherAccount.setId(teacherINOs.get(i).getId());
            teacherAccountMapper.insert(teacherAccount);
            teacherMapper.insert(teacher);
        }
        return 1;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ADMINISTRATOR_ACCOUNT
     *
     * @mbg.generated Wed Oct 27 09:24:02 CST 2021
     */
    @Override
    public int insertSelective(Teacher record) {
        return teacherMapper.insertSelective(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ADMINISTRATOR_ACCOUNT
     *
     * @mbg.generated Wed Oct 27 09:24:02 CST 2021
     */
    @Override
    public Teacher selectByPrimaryKey(String id) {
        return teacherMapper.selectByPrimaryKey(id);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ADMINISTRATOR_ACCOUNT
     *
     * @mbg.generated Wed Oct 27 09:24:02 CST 2021
     */
    @Override
    public int updateByPrimaryKeySelective(Teacher record) {
        return teacherMapper.updateByPrimaryKeySelective(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ADMINISTRATOR_ACCOUNT
     *
     * @mbg.generated Wed Oct 27 09:24:02 CST 2021
     */
    @Override
    public int updateByPrimaryKey(Teacher record) {
        return teacherMapper.updateByPrimaryKey(record);
    }
}
