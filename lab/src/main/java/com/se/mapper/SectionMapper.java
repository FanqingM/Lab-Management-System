package com.se.mapper;

import com.se.dto.SectionDTO;
import com.se.entity.Section;
import com.se.entity.SectionKey;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface SectionMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SECTION
     *
     * @mbg.generated Wed Oct 27 22:15:26 CST 2021
     */
    int deleteByPrimaryKey(SectionKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SECTION
     *
     * @mbg.generated Wed Oct 27 22:15:26 CST 2021
     */
    int insert(Section record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SECTION
     *
     * @mbg.generated Wed Oct 27 22:15:26 CST 2021
     */
    int insertSelective(Section record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SECTION
     *
     * @mbg.generated Wed Oct 27 22:15:26 CST 2021
     */
    Section selectByPrimaryKey(SectionKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SECTION
     *
     * @mbg.generated Wed Oct 27 22:15:26 CST 2021
     */
    int updateByPrimaryKeySelective(Section record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SECTION
     *
     * @mbg.generated Wed Oct 27 22:15:26 CST 2021
     */
    int updateByPrimaryKey(Section record);

    @Select("SELECT * FROM COURSE JOIN SECTION S on COURSE.ID = S.COURSE_ID WHERE TERCHER_ID = #{teacherId}")
    List<SectionDTO> findSectionsOfTeacher(String teacherId);

    @Select("SELECT DISTINCT S.COURSE_ID,S.SECTION_ID FROM SECTION S NATURAL JOIN REPORT WHERE TERCHER_ID = #{teacherId} AND GRADES IS NULL")
    List<SectionKey> findSectionsOfTeacherHasNoGrading(String teacherId);

    @Select("SELECT * FROM COURSE JOIN SECTION S on COURSE.ID = S.COURSE_ID WHERE COURSE.ID = #{courseId} and S.SECTION_ID = #{sectionId}")
    SectionDTO findOneSection(String courseId,String sectionId);
}